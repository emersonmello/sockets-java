plugins {
    id 'application'
}

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation 'org.slf4j:slf4j-api:2.0.12'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    implementation 'org.slf4j:slf4j-simple:2.0.12'

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'engtelecom.std.App'
}

// Tarefa para executar o tcp
// Execute a tarefa com o comando `./gradlew tcp`
tasks.register('servidorTcp', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    description = 'Executa o tcp'
    group = 'application'
    mainClass = 'engtelecom.std.tcp.AppServidorTcp'
}

// Tarefa para executar o cliente
// Execute a tarefa com o comando `./gradlew cliente`
tasks.register('clienteTcp', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    description = 'Executa o cliente'
    group = 'application'
    mainClass = 'engtelecom.std.tcp.AppClienteTcp'
}

// Tarefa para executar o servidor UDP
// Execute a tarefa com o comando `./gradlew servidorUdp`
tasks.register('servidorUdp', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    description = 'Executa o tcp UDP'
    group = 'application'
    mainClass = 'engtelecom.std.udp.AppUdpServer'
}

// Tarefa para executar o cliente UDP
// Execute a tarefa com o comando `./gradlew clienteUdp`
tasks.register('clienteUdp', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    description = 'Executa o cliente UDP'
    group = 'application'
    mainClass = 'engtelecom.std.udp.AppUdpClient'
}

// Tarefa para executar o servidor Multicast
// Execute a tarefa com o comando `./gradlew servidorMulticast`
tasks.register('servidorMulticast', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    description = 'Executa o tcp Multicast'
    group = 'application'
    mainClass = 'engtelecom.std.multicast.AppServidorMulticast'
}

// Tarefa para executar o cliente Multicast
// Execute a tarefa com o comando `./gradlew clienteMulticast`
tasks.register('clienteMulticast', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    description = 'Executa o cliente Multicast'
    group = 'application'
    mainClass = 'engtelecom.std.multicast.AppClienteMulticast'
}

tasks.named('test') {
    useJUnitPlatform()
}
